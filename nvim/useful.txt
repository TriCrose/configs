forcing motions (place between motion and operator):
 - v -> force operator to work characterwise
 - V -> force operator to work linewise
 - ^V -> force operator to work blockwise

motions:
 - zf -> create fold (space -> unfold, zR -> unfold all)
 - | -> to column n
 - (/) -> move in sentences
 - {/} -> move in paragraphs

text object selections (visual mode or after operator):
 - iw -> inner word
 - aw -> "a" word (includes whitespace)
 - iW, aW, etc.
 - is/as -> sentence
 - ip/ap -> paragraph
 - i[/a[ -> within []s
 - etc. for (,{,<,",',`
 - can also specify "b" instead of "(" and "B" instead of "{"

jumps:
 - `` -> prev cursor position before jump
 - :ju -> print jump list
 - ^O/^I -> older/newer in jump list
 - :changes -> print the change list
 - g;/g, -> older/newer in change list

visual mode:
 - ~ -> switch case
 - u -> convert to lowercase
 - U -> convert to uppercase

vim-surround:
 - ds[char] -> delete surrounding [char]s
 - cs[char1][char2] -> change surrounding [char1]s to [char2]s
 - ysiw[char] -> surround current word with [char] (the iw is a text object selection)
 - yss[char] -> surround current line with [char]

buffers:
 - the "alternate buffer" is specific to each buffer
 - inactive buffers do not contain anything and are not visible
 - ped[it] {file} -> open a file the preview window
 - pc[lose] -> close any preview window currently open
 - % -> the buffer in the current window
 - # -> the alternate buffer
 - + -> the buffer has unwritten changes
 - h -> the buffer is hidden (i.e. not visible in a window)
 - a -> the buffer is active (i.e. visible in a window)
 - u -> the buffer is unlisted (won't show up on :ls)
 - - -> the buffer has 'modifiable' turned off
 - = -> the buffer is readonly
 - x -> the buffer has read errors
 - R/F -> the buffer is a terminal and is runnning/finished a job

registers:
 - "x[d,c,y,p,etc.] -> interchange text with register x
 - :let @a=@b -> copy contents of register b to register a
 - :let @A=@b -> append the contents of register b to register a
 - 10 types of register

current dir:
 - :cd -> set current dir
 - :tc[d] -> set current directory for the tab and window
 - :lc[d] -> set local current directory for window

searching:
 - :grep -si <regex> <file_paths> -> search for regex using findstr (on Windows)
 - -s option -> search recursively through subdirectories
 - -i option -> case insensitive
 - <cword> -> expands to the current word under the cursor
 - <cWORD> -> expands to the current WORD under the cursor
 - <cfile> -> expands to current path under the cursor

marks:
 - m{a-zA-Z} -> set mark {a-zA-Z} to the current cursor position
 - `{a-zA-Z} -> goto mark {a-zA-Z} characterwise
 - '{a-zA-Z} -> goto mark {a-zA-Z} linewise
 - lowercase marks exist per file
 - uppercase marks are valid between files

writing normal text:
 - set linebreak -> only break lines on word boundaries
 - set showbreak= -> clear showbreak parameter

misc:
 - :so -> shorthand for :source
 - K -> search for a help page on the word under the cursor
 - J -> join lines with space
 - gJ -> join line no space
 - xp -> transpose two letters
 - <S-o><CR> -> Use this if the cursor is on the single blank line between two paragraphs to create the whitespace for a new one. Flows nicely with <Tab>/<S-Tab> to move between paragraphs.
 - :cd %:p:h -> change directory to the parent of the currently opened file
 - :set scrollbind -> bind scrolling across every window that has this set
 - gf -> (goto file) edit the file whose path name is under the cursor (or in the current selection)
 - y<text-selector>P -> duplicate text when cursor is within (use 'a' version of selector to keep whitespace)
 - % -> if outside brackets: go to next end bracket on current line;
        if inside brackets: go to previous start bracket;
        if cursor on bracket: go to other bracket.
        e.g. can use 'c%' instead of 'caB' when cursor in on bracket
 - [<number>][i,a,I,A] -> insert text multiple times (repeat text)
 - look for unique symbols to jump to: searching is good because it adds the location to the jump list

vim trainer:
 - trains lookahead by giving you new instructions as you complete the current ones
 - categories:
   - yanking/putting
   - f/t (with number prefixes)
   - jumping
 - gives three metrics of proficiency:
   - time taken
   - efficiency
   - smoothness of typing
